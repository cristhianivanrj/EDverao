/*
 * lista01.c
 *
 *  Created on: 21/01/2019
 *      Author: cristhian
 */

#include <stdio.h>
#include <stdlib.h>


typedef struct elemento{
	int dado;
	struct elemento * proximo;
}TamNo;


typedef struct lista{
	TamNo * inicio;
	TamNo * fim;
}t_lista;

int insereInicio(int valor, t_lista * argLista){
    TamNo * novoprimeiro = (TamNo *)malloc(sizeof(TamNo));
     novoprimeiro->dado = valor;
    novoprimeiro->proximo = argLista->inicio;
    argLista->inicio = novoprimeiro;
     if(argLista->fim == NULL){ //l->inicio->proximo == NULL ou novoprimeiro->proximo == NULL
    	 argLista->fim = argLista->inicio;
     }
     return 0;
}


void insereFinal(int valor, t_lista * argLista){
   TamNo * novoultimo = (TamNo *)malloc(sizeof(TamNo));
   novoultimo->dado = valor;
   novoultimo->proximo = NULL;
   if(argLista->inicio == NULL){
	   argLista->inicio = novoultimo;
   }else{
	   argLista->fim->proximo = novoultimo;
   }
   argLista->fim = novoultimo;


}

int removeInicio(t_lista * argLista){
    if(argLista->inicio == NULL){
       return -1;
    }
    int tmp = argLista->inicio->dado;
    TamNo * removido = argLista->inicio;
    argLista->inicio = argLista->inicio->proximo;
    free(removido);
    if(argLista->inicio == NULL){
    	argLista->fim = NULL;
    }
    return tmp;
}

int estaVazia(t_lista * argLista){
    if(argLista->inicio == NULL){
       return 1;
    }
    return 0;
}

int removeFinal(t_lista * argLista){
    if(argLista->inicio == NULL){
       return -1;
    }
    int tmp = argLista->fim->dado;
    TamNo * ultimo = argLista->inicio;
    TamNo * penultimo = NULL;
    while(ultimo->proximo != NULL){
         penultimo = ultimo;
         ultimo = ultimo->proximo;
    }
    if(penultimo != NULL){
       penultimo->proximo = NULL;
       argLista->fim = penultimo;

    }else{//lista possui apenas um elemento
    	argLista->inicio = NULL;
    	argLista->fim = NULL;
    }
    free(ultimo);
    return tmp;

}

void inserir(int pos, int valor, t_lista * argLista){
     if( pos <= 0){
        insereInicio(valor,argLista);
     }else{
         TamNo * atual = argLista->inicio;
         int i = 0;
         for(i = 0; i < (pos-1) && atual != NULL ;i++){
               atual = atual->proximo;
         }
         if(atual == NULL || atual == argLista->fim){
              insereFinal(valor,argLista);
         } else{
              TamNo * novo = (TamNo *)malloc(sizeof(TamNo));
              novo->dado = valor;
              novo->proximo = atual->proximo;
              atual->proximo = novo;
         }
     }
}


int remover(int pos, t_lista * argLista){
	if(estaVazia(argLista)){
		return -1;
	}
	if(pos < 0){
		return -1;
	}
	TamNo * removido = argLista->inicio;
	TamNo * ant_removido = NULL;
	int i = 0;
	for (i = 0; i < pos && removido != NULL; i++) {
		ant_removido = removido;
		removido = removido->proximo;
	}
	if(removido != NULL){
		if(removido == argLista->inicio){
			argLista->inicio = removido->proximo;
		}else{
			ant_removido->proximo = removido->proximo;
		}
		if(removido == argLista->fim){
			argLista->fim = ant_removido;
		}
		int tmp = removido->dado;
		free(removido);
		return tmp;
	}
	return -1;
}


int busca(int valor, t_lista * argLista){
    TamNo * atual = argLista->inicio;
    TamNo * anterior = NULL;
    while(atual != NULL && atual->dado != valor){
       anterior = atual;
       atual = atual->proximo;
    }
    if(atual == NULL){
        return -1;
    }else if (atual == argLista->inicio){
        return atual->dado;
    }else if (atual == argLista->fim){
    	argLista->fim = anterior;
    }
    anterior->proximo = atual->proximo;
    atual->proximo = argLista->inicio;
    argLista->inicio = atual;
    return atual->dado;
}

int busca1(int valor, t_lista * argLista){
    TamNo * atual = argLista->inicio;
    int cont = 0;
    while(atual != NULL && atual->dado != valor){

       atual = atual->proximo;
       cont++;
    }
    if(atual == NULL){
        return -1;
    }
    int ret = remover(cont,argLista);
    insereInicio(ret,argLista);
    return ret;

}


void imprimeLista(t_lista * argLista){
   TamNo * atual = argLista->inicio;
    printf("Lista:");
    while(atual != NULL){
  	printf(" %d",atual->dado);
        atual = atual->proximo;
    }
    printf("\n");

}

int main (int argc, char *argv[]){
    t_lista * argLista = (t_lista *)malloc(sizeof(t_lista));
    insereFinal(1,argLista);
    insereFinal(2,argLista);
    insereFinal(3,argLista);
    inserir(2,30,argLista);
    //printf("Numero removido pos 2: %d\n",remover(2,l));

    /*while(!estaVazia(l)){
       int rmv = removeInicio(l);
       printf("Numero removido: %d\n",rmv);
       printf("Busca pelo 3: %d\n",buscar(3,l));
    }*/
    imprimeLista(argLista);
    printf("Busca pelo 30: %d\n",busca1(3,argLista));
    imprimeLista(argLista);
    printf("FIM!!!\n");
}












