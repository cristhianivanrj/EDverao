/*
 * pilha0.c
 *
 *  Created on: 21/01/2019
 *      Author: cristhian
 */

#include <stdio.h>
#include <stdlib.h>

typedef struct elemento{
	int dado;
	struct elemento * proximo;
}t_elemento;


typedef struct lista{
	t_elemento * inicio;
	t_elemento * fim;
}t_lista;


typedef struct pilha{
	t_lista * l;
}t_pilha;


t_lista * criarLista(){
   t_lista * nova = (t_lista *)malloc(sizeof(t_lista));
   nova->inicio = NULL;
   nova->fim = NULL;
   return nova;
}



t_pilha * criarPilha(){
   t_pilha * novapilha = (t_pilha *)malloc(sizeof(t_pilha));
   novapilha->l =  criarLista();
   return novapilha;
}

int insereInicio(int valor, t_lista * l){
    t_elemento * novoprimeiro = (t_elemento *)malloc(sizeof(t_elemento));
     novoprimeiro->dado = valor;
    novoprimeiro->proximo = l->inicio;
    l->inicio = novoprimeiro;
     if(l->fim == NULL){ //l->inicio->proximo == NULL ou novoprimeiro->proximo == NULL
         l->fim = l->inicio;
     }
     return 0;
}


void insereFinal(int valor, t_lista * l){
   t_elemento * novoultimo = (t_elemento *)malloc(sizeof(t_elemento));
   novoultimo->dado = valor;
   novoultimo->proximo = NULL;
   if(l->inicio == NULL){
      l->inicio = novoultimo;
   }else{
      l->fim->proximo = novoultimo;
   }
   l->fim = novoultimo;


}

int removeInicio(t_lista * l){
    if(l->inicio == NULL){
       return -1;
    }
    int tmp = l->inicio->dado;
    t_elemento * removido = l->inicio;
    l->inicio = l->inicio->proximo;
    free(removido);
    if(l->inicio == NULL){
        l->fim = NULL;
    }
    return tmp;
}

int estaVazia(t_lista * l){
    if(l->inicio == NULL){
       return 1;
    }
    return 0;
}

int removeFinal(t_lista * l){
    if(l->inicio == NULL){
       return -1;
    }
    int tmp = l->fim->dado;
    t_elemento * ultimo = l->inicio;
    t_elemento * penultimo = NULL;
    while(ultimo->proximo != NULL){
         penultimo = ultimo;
         ultimo = ultimo->proximo;
    }
    if(penultimo != NULL){
       penultimo->proximo = NULL;
       l->fim = penultimo;

    }else{//lista possui apenas um elemento
        l->inicio = NULL;
        l->fim = NULL;
    }
    free(ultimo);
    return tmp;

}

void inserir(int pos, int valor, t_lista * l){
     if( pos <= 0){
        insereInicio(valor,l);
     }else{
         t_elemento * atual = l->inicio;
         int i = 0;
         for(i = 0; i < (pos-1) && atual != NULL ;i++){
               atual = atual->proximo;
         }
         if(atual == NULL || atual == l->fim){
              insereFinal(valor,l);
         } else{
              t_elemento * novo = (t_elemento *)malloc(sizeof(t_elemento));
              novo->dado = valor;
              novo->proximo = atual->proximo;
              atual->proximo = novo;
         }
     }
}


int remover(int pos, t_lista * l){
	if(estaVazia(l)){
		return -1;
	}
	if(pos < 0){
		return -1;
	}
	t_elemento * removido = l->inicio;
	t_elemento * ant_removido = NULL;
	int i = 0;
	for (i = 0; i < pos && removido != NULL; i++) {
		ant_removido = removido;
		removido = removido->proximo;
	}
	if(removido != NULL){
		if(removido == l->inicio){
			l->inicio = removido->proximo;
		}else{
			ant_removido->proximo = removido->proximo;
		}
		if(removido == l->fim){
			l->fim = ant_removido;
		}
		int tmp = removido->dado;
		free(removido);
		return tmp;
	}
	return -1;
}


void empilhar(int valor, t_pilha * p){
    insereInicio(valor, p->l);
}


int desempilhar(t_pilha * p){
    return removeInicio(p->l);
}


int estaVaziaPilha(t_pilha * p){
    if(p->l->inicio == NULL){
       return 1;
   }
   return 0;
}

int main (int argc, char *argv[]){
    /*t_lista * l = (t_lista *)malloc(sizeof(t_lista));
    insereFinal(1,l);
    insereFinal(2,l);
    insereFinal(3,l);
    inserir(2,30,l);
    //printf("Numero removido pos 2: %d\n",remover(2,l));

    while(!estaVazia(l)){
       int rmv = removeInicio(l);
       printf("Numero removido: %d\n",rmv);
    }*/
    t_pilha * p1 = criarPilha();
    empilhar(1,p1);
    empilhar(2,p1);
    while(!estaVaziaPilha(p1)){
      printf("Numero desempilhado: %d\n",desempilhar(p1));
   }


    printf("FIM!!!\n");
}





























