/*
 * lista01.c
 *
 *  Created on: 21/01/2019
 *      Author: cristhian
 */

#include <stdio.h>
#include <stdlib.h>


typedef struct elemento{
	int Info;
	struct elemento * proximo;
}FormatoNo;


typedef struct lista{
	FormatoNo * IndIniLst;
	FormatoNo * IndFimLst;
}TamLista;

int insereInicioLst(int valor, TamLista * argLista){
    FormatoNo * newElement = (FormatoNo *)malloc(sizeof(FormatoNo));
     newElement->Info = valor;
    newElement->proximo = argLista->IndIniLst;
    argLista->IndIniLst = newElement;
     if(argLista->IndFimLst == NULL){ //l->IndIniLst->proximo == NULL ou newElement->proximo == NULL
    	 argLista->IndFimLst = argLista->IndIniLst;
     }
     return 0;
}


void insereFinal(int valor, TamLista * argLista){
   FormatoNo * novoultimo = (FormatoNo *)malloc(sizeof(FormatoNo));
   novoultimo->Info = valor;
   novoultimo->proximo = NULL;
   if(argLista->IndIniLst == NULL){
	   argLista->IndIniLst = novoultimo;
   }else{
	   argLista->IndFimLst->proximo = novoultimo;
   }
   argLista->IndFimLst = novoultimo;


}

int removeIndIniLst(TamLista * argLista){
    if(argLista->IndIniLst == NULL){
       return -1;
    }
    int tmp = argLista->IndIniLst->Info;
    FormatoNo * removido = argLista->IndIniLst;
    argLista->IndIniLst = argLista->IndIniLst->proximo;
    free(removido);
    if(argLista->IndIniLst == NULL){
    	argLista->IndFimLst = NULL;
    }
    return tmp;
}

int estaVazia(TamLista * argLista){
    if(argLista->IndIniLst == NULL){
       return 1;
    }
    return 0;
}

int removeFinal(TamLista * argLista){
    if(argLista->IndIniLst == NULL){
       return -1;
    }
    int tmp = argLista->IndFimLst->Info;
    FormatoNo * ultimo = argLista->IndIniLst;
    FormatoNo * penultimo = NULL;
    while(ultimo->proximo != NULL){
         penultimo = ultimo;
         ultimo = ultimo->proximo;
    }
    if(penultimo != NULL){
       penultimo->proximo = NULL;
       argLista->IndFimLst = penultimo;

    }else{//lista possui apenas um elemento
    	argLista->IndIniLst = NULL;
    	argLista->IndFimLst = NULL;
    }
    free(ultimo);
    return tmp;

}

void inserir(int pos, int valor, TamLista * argLista){
     if( pos <= 0){
        insereInicioLst(valor,argLista);
     }else{
         FormatoNo * atual = argLista->IndIniLst;
         int i = 0;
         for(i = 0; i < (pos-1) && atual != NULL ;i++){
               atual = atual->proximo;
         }
         if(atual == NULL || atual == argLista->IndFimLst){
              insereFinal(valor,argLista);
         } else{
              FormatoNo * novo = (FormatoNo *)malloc(sizeof(FormatoNo));
              novo->Info = valor;
              novo->proximo = atual->proximo;
              atual->proximo = novo;
         }
     }
}


int remover(int pos, TamLista * argLista){
	if(estaVazia(argLista)){
		return -1;
	}
	if(pos < 0){
		return -1;
	}
	FormatoNo * removido = argLista->IndIniLst;
	FormatoNo * ant_removido = NULL;
	int i = 0;
	for (i = 0; i < pos && removido != NULL; i++) {
		ant_removido = removido;
		removido = removido->proximo;
	}
	if(removido != NULL){
		if(removido == argLista->IndIniLst){
			argLista->IndIniLst = removido->proximo;
		}else{
			ant_removido->proximo = removido->proximo;
		}
		if(removido == argLista->IndFimLst){
			argLista->IndFimLst = ant_removido;
		}
		int tmp = removido->Info;
		free(removido);
		return tmp;
	}
	return -1;
}


int busca(int valor, TamLista * argLista){
    FormatoNo * atual = argLista->IndIniLst;
    FormatoNo * anterior = NULL;
    while(atual != NULL && atual->Info != valor){
       anterior = atual;
       atual = atual->proximo;
    }
    if(atual == NULL){
        return -1;
    }else if (atual == argLista->IndIniLst){
        return atual->Info;
    }else if (atual == argLista->IndFimLst){
    	argLista->IndFimLst = anterior;
    }
    anterior->proximo = atual->proximo;
    atual->proximo = argLista->IndIniLst;
    argLista->IndIniLst = atual;
    return atual->Info;
}

int busca1(int valor, TamLista * argLista){
    FormatoNo * atual = argLista->IndIniLst;
    int cont = 0;
    while(atual != NULL && atual->Info != valor){

       atual = atual->proximo;
       cont++;
    }
    if(atual == NULL){
        return -1;
    }
    int ret = remover(cont,argLista);
    insereInicioLst(ret,argLista);
    return ret;

}


void imprimeLista(TamLista * argLista){
   FormatoNo * atual = argLista->IndIniLst;
    printf("Lista:");
    while(atual != NULL){
  	printf(" %d",atual->Info);
        atual = atual->proximo;
    }
    printf("\n");

}

int main (int argc, char *argv[]){
    TamLista * argLista = (TamLista *)malloc(sizeof(TamLista));
    insereFinal(1,argLista);
    insereFinal(2,argLista);
    insereFinal(3,argLista);
    inserir(2,30,argLista);
    //printf("Numero removido pos 2: %d\n",remover(2,l));

    /*while(!estaVazia(l)){
       int rmv = removeIndIniLst(l);
       printf("Numero removido: %d\n",rmv);
       printf("Busca pelo 3: %d\n",buscar(3,l));
    }*/
    imprimeLista(argLista);
    printf("Busca pelo 30: %d\n",busca1(3,argLista));
    imprimeLista(argLista);
    printf("IndFimLst!!!\n");
}












